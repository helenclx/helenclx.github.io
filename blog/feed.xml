<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title></title>
    <subtitle>Helen Chong talks about tech, coding and development</subtitle>
    <link href="https://helenchong.dev/blog/feed.xml" rel="self"/>
    <link href="https://helenchong.dev/blog/"/>
    <updated>2024-07-31T00:00:00Z</updated>
    <id>https://helenchong.dev/blog/</id>
    <author>
        <name>Helen Chong</name>
        <email>contact@helenchong.dev</email>
    </author>
        
        <entry>
            <title>Migrating My Website to Hostinger</title>
            <link href="https://helenchong.dev/blog/posts/2024-07-31-migrating-to-hostinger/"/>
            <updated>2024-07-31T00:00:00Z</updated>
            <id>https://helenchong.dev/blog/posts/2024-07-31-migrating-to-hostinger/</id>
            <content type="html">&lt;p&gt;Starting from 30 July 2024, &lt;code&gt;helenchong.dev&lt;/code&gt;, my developer portfolio and blog website, has migrated from GitHub Pages to Hostinger as its web host.&lt;/p&gt;
&lt;p&gt;This website was hosted on GitHub Pages since its creation, and has come a long way since its launch in February 2023, from &lt;a href=&quot;https://helenchong.dev/blog/posts/2023-08-21-Welcome-to-Helen-Codes/&quot;&gt;adding a blog&lt;/a&gt;, &lt;a href=&quot;https://helenchong.dev/blog/posts/2024-04-11-rebuilding-my-developer-portfolio-with-eleventy/&quot;&gt;being rebuilt with Eleventy&lt;/a&gt; to &lt;a href=&quot;https://helenchong.dev/blog/posts/2024-05-29-custom-domain-name-helenchong-dev/&quot;&gt;getting its own domain name&lt;/a&gt;. This website started out as a standard developer portfolio, but as I grew as an aspiring web developer, so did my website.&lt;/p&gt;
&lt;p&gt;Therefore, I decided that it was time to take my website to another level to allow both my website and myself as a developer more room to grow, starting with migrating from GitHub Pages.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;why-moving-hosts&quot;&gt;Why Moving Hosts&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-31-migrating-to-hostinger/#why-moving-hosts&quot; aria-labelledby=&quot;why-moving-hosts&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;GitHub Pages is decent for hosting static sites. You can host a static site on GitHub Pages by directly deploying a Git repository. It certainly helps that you can do so for free, and if you already have a custom domain name, you can use it on your GitHub Pages website without additional costs. I still think GitHub Pages is a good platform if you are just starting out building your website or blog, especially if you are unsure if you are going to commit to it.&lt;/p&gt;
&lt;p&gt;However, as I grew as a web developer and began to explore more advance topics about web development, I started to desire for more control over my own website. A notable disadvantage of GitHub Pages compared to web hosting services that support dynamic websites is the lack of &lt;code&gt;.htaccess&lt;/code&gt; support. Learning about the things &lt;code&gt;.htaccess&lt;/code&gt; can do has tempted me to consider migrating away form GitHub Pages.&lt;/p&gt;
&lt;p&gt;Furthermore, in addition to this developer portfolio and blog website, I have also built various hobby websites, so it would be nice if I could consolidate the management of my websites into one platform.&lt;/p&gt;
&lt;p&gt;Last but not least, I am invested in web development and building my own website  enough to be willing to spend money on them, as evident in my purchase and registration of a custom domain name &lt;code&gt;helenchong.dev&lt;/code&gt; for this website. That said, I do need to consider carefully about how much money I am going to spend, which factors in why I eventually chose Hostinger to host my websites.&lt;/p&gt;
&lt;p&gt;Eventually, on 25 July 2024, I registered an account on &lt;a href=&quot;https://www.hostinger.my/&quot;&gt;Hostinger&lt;/a&gt;, and purchased their 48-month Premium Shared Hosting plan, then I migrated my websites starting from my hobby websites on the same day. Later, on 30 July 2024, I completed the migration of &lt;code&gt;helenchong.dev&lt;/code&gt; from GitHub Pages to Hostinger, and renamed the &lt;a href=&quot;https://github.com/helenclx/helenchong.dev&quot;&gt;website&#39;s GitHub repository&lt;/a&gt; from &lt;code&gt;helenclx.github.io&lt;/code&gt; to &lt;code&gt;helenchong.dev&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;why-hostinger&quot;&gt;Why Hostinger&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-31-migrating-to-hostinger/#why-hostinger&quot; aria-labelledby=&quot;why-hostinger&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;heading-wrapper h3&quot;&gt;
&lt;h3 id=&quot;affordable-price-with-regional-pricing&quot;&gt;Affordable Price with Regional Pricing&lt;/h3&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-31-migrating-to-hostinger/#affordable-price-with-regional-pricing&quot; aria-labelledby=&quot;affordable-price-with-regional-pricing&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;The biggest draw about Hostinger is its pricing â€” it is not only cheap, but also offering regional pricing. This is a huge deal for people who live in countries with weaker currencies than US Dollars and Euro, as the pricing scales to the level we are more comfortable spending, without worrying about currency conversion rates.&lt;/p&gt;
&lt;p&gt;For reference, as of this writing, 1 USD equals approximately 4.6 Malaysian Ringgit (MYR), while the minimum wage in Malaysia is 1,500 MYR, which approximately equals to 325.7 USD, per month. Therefore, if a Malaysian like me is going to spend money, every USD counts.&lt;/p&gt;
&lt;p&gt;Compare the pricing of the 48-month Premium Shared Hosting plan of &lt;a href=&quot;https://www.hostinger.my/&quot;&gt;Hostinger.my&lt;/a&gt; to &lt;a href=&quot;https://www.hostinger.com/&quot;&gt;Hostinger.com&lt;/a&gt;: At the time of my purchase, the plan cost 7.99 per month in MYR (approximately 1.71 USD), while 2.99 per month in USD (approximately 13.97 MYR). This means I ended up saving almost 6 MYR per month by purchasing the plan on the Malaysian branch of Hostinger. This is just comparing Hostinger&#39;s own hosting plan with different currencies, let alone comparing Hostinger&#39;s hosting plan to its competitors.&lt;/p&gt;
&lt;p&gt;As a bonus, being able to purchase Hostinger&#39;s hosting plans in Malaysian Ringgit means I can pay by directly transferring money from a Malaysian bank account.&lt;/p&gt;
&lt;p&gt;Being cheap is not even the only reason I chose Hostinger; what is better than being cheap is to provide many, many features at the same time.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h3&quot;&gt;
&lt;h3 id=&quot;many-many-features-at-a-cheap-price&quot;&gt;Many, Many Features at a Cheap Price&lt;/h3&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-31-migrating-to-hostinger/#many-many-features-at-a-cheap-price&quot; aria-labelledby=&quot;many-many-features-at-a-cheap-price&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;The cheap price of the Premium Shared Hosting Plan of Hostinger is jam-packed with many features, including but not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ability to create up to 100 websites (which is significantly more than enough for average users)&lt;/li&gt;
&lt;li&gt;100 GB SSD storage&lt;/li&gt;
&lt;li&gt;Unlimited bandwidth&lt;/li&gt;
&lt;li&gt;Unlimited MySQL databases&lt;/li&gt;
&lt;li&gt;Email accounts included for free&lt;/li&gt;
&lt;li&gt;Built-in Git support, which allows me to continue deploying my website from its Git repository&lt;/li&gt;
&lt;li&gt;And more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the subject of email accounts, it is worth pointing out that Hostinger&#39;s Premium Shared Hosting plan allows you to create an email account for each website you made, and you can have up to 100 addresses and forwarders for each email account.&lt;/p&gt;
&lt;p&gt;Hostinger&#39;s Git support allows you to even deploy multiple repositories to the same website, which was what I ended up doing to deploy &lt;a href=&quot;https://helenchong.dev/resume&quot;&gt;my resume&lt;/a&gt; into my website&#39;s directory, despite it having a &lt;a href=&quot;https://github.com/helenclx/resume&quot;&gt;separate Git repository&lt;/a&gt; from my website.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;excellent-customer-support&quot;&gt;Excellent Customer Support&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-31-migrating-to-hostinger/#excellent-customer-support&quot; aria-labelledby=&quot;excellent-customer-support&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;I am pleased to report that my experience with Hostinger&#39;s support team has been excellent.&lt;/p&gt;
&lt;p&gt;After migrating this website to Hostinger, I was trying to deploy my resume to this website&#39;s directory. At first, I had an issue with my resume not being deployed to this website as I intended, so I sought for help by contacting Hostinger&#39;s support team via live chat. The support team answered to my message quickly. The specialist who handled my case were not only kind and polite, but also willing to walk me through the process of figuring out possible causes of my issue.&lt;/p&gt;
&lt;p&gt;Turned out, I accidentally deployed my resume to a different website of mine, so I double-checked and reconfigured my set-up to deploy both my website and resume from their GitHub repositories to the correct directories, and my problem was finally solved.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;domain-name-remaining-at-porkbun&quot;&gt;Domain Name Remaining at Porkbun&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-31-migrating-to-hostinger/#domain-name-remaining-at-porkbun&quot; aria-labelledby=&quot;domain-name-remaining-at-porkbun&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;While Hostinger provides domain registration and transfer service, I chose to have the &lt;code&gt;helenchong.dev&lt;/code&gt; domain name stay with &lt;a href=&quot;https://porkbun.com/&quot;&gt;Porkbun&lt;/a&gt;, because I already spent money on the domain name, so Hostinger&#39;s hosting plan providing domain name registration for free for the first year does not benefit me.&lt;/p&gt;
&lt;p&gt;In addition, Porkbun&#39;s renewal rate for domain names is cheaper than Hostinger. For example, Porkbun renews the &lt;code&gt;.com&lt;/code&gt; domain extension at 10.37 USD per year, while Hostinger renews at 15.99 USD per year. Even the Malaysian Ringgit pricing of Hostinger&#39;s domain renewal rate for &lt;code&gt;.com&lt;/code&gt;, 55.99 MYR per year, is still more expansive than Porkbun&#39;s approximately 47.76 MYR per year rate.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;what-will-happen-to-my-github-pages-subdomain&quot;&gt;What will Happen to My GitHub Pages Subdomain&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-31-migrating-to-hostinger/#what-will-happen-to-my-github-pages-subdomain&quot; aria-labelledby=&quot;what-will-happen-to-my-github-pages-subdomain&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;Now that my website has migrated to Hostinger, what happens to &lt;code&gt;helenclx.github.io&lt;/code&gt;, my GitHub Pages subdomain now?&lt;/p&gt;
&lt;p&gt;At the moment, I am still deploying projects to GitHub Pages, so the &lt;code&gt;helenclx.github.io&lt;/code&gt; subdomain is still being used by my projects on GitHub, but if you just visit &lt;code&gt;helenclx.github.io&lt;/code&gt; on its own, you will now get a 404 error page, indicating there is no longer a GitHub Pages site at this address.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-31-migrating-to-hostinger/#wrapping-up&quot; aria-labelledby=&quot;wrapping-up&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;I am glad to have made the decision to move hosts for this website. By migrating my developer portfolio and blog website to Hostinger, I felt like opening up new opportunities for my website to grow, and for myself to keep learning as a web developer.&lt;/p&gt;
&lt;p&gt;As of this writing, I had created a &lt;code&gt;.htaccess&lt;/code&gt; for my website to set a custom 404 page, configure the cache policy of this website&#39;s static assets, and remove &lt;code&gt;.html&lt;/code&gt; file extension from website addresses. I am looking forward to exploring this new web hosting experience more.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Responsive Disability Pride Flag CSS Background</title>
            <link href="https://helenchong.dev/blog/posts/2024-07-23-responsive-disability-pride-flag-css/"/>
            <updated>2024-07-23T00:00:00Z</updated>
            <id>https://helenchong.dev/blog/posts/2024-07-23-responsive-disability-pride-flag-css/</id>
            <content type="html">&lt;div class=&quot;disability-pride-flag demo&quot; role=&quot;img&quot; aria-label=&quot;Demo of the Disability Pride flag coded in CSS&quot;&gt;&lt;/div&gt;
&lt;p&gt;Happy &lt;a href=&quot;https://www.weareincludability.co.uk/resources/what-is-disability-pride-month&quot;&gt;Disability Pride Month&lt;/a&gt;! To celebrate the occasion, I did a small project: a responsive Disability Pride Flag CSS background! For those who do not know, this &lt;a href=&quot;https://www.womansday.com/life/a43964487/disability-pride-flag/&quot;&gt;Disability Pride Flag&lt;/a&gt; was created by &lt;a href=&quot;https://capri0mni.dreamwidth.org/837596.html&quot;&gt;Ann Magill&lt;/a&gt; and released in 2021.&lt;/p&gt;
&lt;p&gt;Here is the CSS snippet for a responsive Disability Pride Flag background:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.disability-pride-flag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string url&quot;&gt;&quot;data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; xml:space=&#39;preserve&#39; width=&#39;651.83&#39; height=&#39;300&#39; viewBox=&#39;-90.33 0 651.83 300&#39;%3E%3Cpath fill=&#39;%233BB07D&#39; stroke=&#39;%233BB07D&#39; stroke-miterlimit=&#39;10&#39; stroke-width=&#39;.351&#39; d=&#39;M561.5 300 162.902.664h-50.634L510.867 300z&#39;/%3E%3Cpath fill=&#39;%237BC2E0&#39; stroke=&#39;%237BC2E0&#39; stroke-miterlimit=&#39;10&#39; stroke-width=&#39;.351&#39; d=&#39;M510.711 300 112.113.664H61.478L460.078 300z&#39;/%3E%3Cpath fill=&#39;%23E8E8E8&#39; stroke=&#39;%23E8E8E8&#39; stroke-miterlimit=&#39;10&#39; stroke-width=&#39;.351&#39; d=&#39;M460.077 300 61.478.664H8.094L406.693 300z&#39;/%3E%3Cpath fill=&#39;%23EEDE77&#39; stroke=&#39;%23EEDE77&#39; stroke-miterlimit=&#39;10&#39; stroke-width=&#39;.351&#39; d=&#39;M406.692 300 8.095.664h-49.111L357.584 300z&#39;/%3E%3Cpath fill=&#39;%23CF7280&#39; stroke=&#39;%23CF7280&#39; stroke-miterlimit=&#39;10&#39; stroke-width=&#39;.351&#39; d=&#39;M357.378 300-41.22.664h-49.11L308.27 300z&#39;/%3E%3C/svg%3E&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #595959&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; no-repeat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After copying the above snippet in a CSS stylesheet or the HTML &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags, to apply the background to an HTML element, simply add the CSS class name &lt;code&gt;disability-pride-flag&lt;/code&gt; (you can rename the class name if you want) to the HTML element&#39;s &lt;code&gt;class&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;The Disability Pride Flag CSS background is done with a combination of CSS background properties and inline SVG URL, and designed to be responsive, so it can adapt to different screen sizes and devices.&lt;/p&gt;
&lt;p&gt;To code the Disability Pride Flag in CSS and make it responsive, I first downloaded an &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Visually_Safe_Disability_Pride_Flag.svg&quot;&gt;SVG file of the Disability Pride Flag&lt;/a&gt; from Wikimedia Commons, then modified the stripes in Adobe Illustrator CS5 (the only version of Adobe Illustrator I actually own) to allow the entire stripes to be shown in wide backgrounds, instead of appearing to be cut off mid-way. After finishing the edit in Illustrator, I saved the SVG file, opened it in Visual Studio Code to obtain the SVG code, used Jake Archibald&#39;s &lt;a href=&quot;https://jakearchibald.github.io/svgomg/&quot;&gt;SVGOMG&lt;/a&gt; to optimise the SVG code, then encode it into CSS-ready code by using &lt;a href=&quot;https://yoksel.github.io/url-encoder/&quot;&gt;Yoksel&#39;s URL-encoder for SVG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since Ann Magill released the Disability Pride Flag to the public domain under &lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;CC0 1.0 Universal&lt;/a&gt;, I am doing the same to my responsive Disability Pride Flag CSS background. Therefore, you are free to use my code and do what you want with it without asking for permission or crediting me.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Aboard the Eleventy 3.0 Train</title>
            <link href="https://helenchong.dev/blog/posts/2024-07-19-eleventy-3-0-upgrade/"/>
            <updated>2024-07-19T00:00:00Z</updated>
            <id>https://helenchong.dev/blog/posts/2024-07-19-eleventy-3-0-upgrade/</id>
            <content type="html">&lt;p&gt;On 9 April 2024, I &lt;a href=&quot;https://helenchong.dev/blog/posts/2024-04-11-rebuilding-my-developer-portfolio-with-eleventy/&quot;&gt;rebuilt this developer portfolio and blog website of mine&lt;/a&gt; with Eleventy 2.0.1. Three months after using Eleventy and loving it, now I have upgraded Eleventy to 3.0! ðŸ¥³&lt;/p&gt;
&lt;p&gt;Version 3.0 of Eleventy is still in alpha, but as I have been following Eleventy&#39;s development and community after starting to use it, and learning about other Eleventy users upgrading to version 3.0, I began to consider hopping on the Eleventy 3.0 train. Now that I have done it, I guess I am one of Eleventy&#39;s &amp;quot;courageous canary testers&amp;quot;, &lt;a href=&quot;https://www.11ty.dev/blog/canary-eleventy-v3/&quot;&gt;as the official Eleventy blog put it&lt;/a&gt;, haha. ðŸ˜†&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;why-upgrading-to-30&quot;&gt;Why Upgrading to 3.0&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-19-eleventy-3-0-upgrade/#why-upgrading-to-30&quot; aria-labelledby=&quot;why-upgrading-to-30&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;heading-wrapper h3&quot;&gt;
&lt;h3 id=&quot;esm-support&quot;&gt;ESM Support&lt;/h3&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-19-eleventy-3-0-upgrade/#esm-support&quot; aria-labelledby=&quot;esm-support&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;The first major factor that made me consider upgrading Eleventy to 3.0 is 3.0&#39;s support for ECMAScript Modules (ESM).&lt;/p&gt;
&lt;p&gt;Since I began to learn web development more seriously starting from December 2022, I have been using ESM in my JavaScript projects, including vanilla JavaScript and React, due to that being what is taught in Scrimba&#39;s JavaScript and React courses. As a consequence, Eleventy 2.0 was my first time using CommonJS, so I had to learn the syntax differences between the CommonJS and ESM. I learned about 3.0&#39;s ESM support soon after I began to use Eleventy, but I decided to stick to 2.0 for a bit because I wanted to familiarise myself with Eleventy first.&lt;/p&gt;
&lt;p&gt;As I learned to use Eleventy more and becoming more satisfied with my decision to build my website with it, I felt more confident in my ability of trying out an alpha release of Eleventy.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h3&quot;&gt;
&lt;h3 id=&quot;built-in-bundle-plugin&quot;&gt;Built-In Bundle Plugin&lt;/h3&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-19-eleventy-3-0-upgrade/#built-in-bundle-plugin&quot; aria-labelledby=&quot;built-in-bundle-plugin&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;Another major push for me to upgrade to Eleventy 3.0 was its &lt;a href=&quot;https://github.com/11ty/eleventy-plugin-bundle&quot;&gt;built-in bundle plugin&lt;/a&gt;. I have been considering to use the plugin to bundle my CSS and JavaScript for specific components, including the header, footer, scroll-to-top button link, and so on, so the CSS and JavaScript code blocks I wrote in the components&#39; templates would be bundled into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element. Without bundling the CSS and JavaScript, the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags would scatter across the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element in the HTML output, which is not a good practice, as the &lt;a href=&quot;https://validator.w3.org/&quot;&gt;W3C Markdown Validation Service&lt;/a&gt; would output errors when I checked the HTML output.&lt;/p&gt;
&lt;p&gt;Previously, Eleventy&#39;s bundle plugin was a separate plugin that needed to be installed manually, as seen in the &lt;a href=&quot;https://github.com/11ty/eleventy-base-blog&quot;&gt;Eleventy base blog&lt;/a&gt; starter project, which uses Eleventy 2.0.1, though starting with Eleventy v3.0.0-alpha.10, the bundle plugin is now bundled with Eleventy.&lt;/p&gt;
&lt;p&gt;Therefore, I finally made the jump, by keying in &lt;code&gt;bun install @11ty/eleventy@canary --save-exact&lt;/code&gt; in my website&#39;s folder on the terminal, and voilÃ ! Eleventy 3.0 here I come!&lt;/p&gt;
&lt;p&gt;(Yes, I use &lt;a href=&quot;https://bun.sh/&quot;&gt;Bun&lt;/a&gt; as the JavaScript runtime for developing my Eleventy website and deploying it to GitHub Pages, and it works since Bun is meant to be a drop-in replacement for Node.js)&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;step-1-changing-my-packagejson-scripts&quot;&gt;Step 1: Changing My &lt;code&gt;package.json&lt;/code&gt; Scripts&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-19-eleventy-3-0-upgrade/#step-1-changing-my-packagejson-scripts&quot; aria-labelledby=&quot;step-1-changing-my-packagejson-scripts&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;A change I had to made immediately after installing Eleventy 3.0 was to edit my &lt;code&gt;package.json&lt;/code&gt; scripts for Eleventy, including &amp;quot;start&amp;quot; and &amp;quot;build&amp;quot; scripts, by replacing &lt;code&gt;@11ty/eleventy&lt;/code&gt; to just &lt;code&gt;eleventy&lt;/code&gt;, since otherwise the terminal will output an error saying &amp;quot;Script not found &#39;@11ty/eleventy&#39;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This happens when I run the Eleventy commands with either &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;bun&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;step-2-bundling-css-and-javascript&quot;&gt;Step 2: Bundling CSS and JavaScript&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-19-eleventy-3-0-upgrade/#step-2-bundling-css-and-javascript&quot; aria-labelledby=&quot;step-2-bundling-css-and-javascript&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;With problems with my &lt;code&gt;package.json&lt;/code&gt; scripts solved, I could finally begin my process to transform my website to an Eleventy 3.0 site, by starting with bundling my component-specific CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;I followed the instructions from &lt;a href=&quot;https://github.com/11ty/eleventy-plugin-bundle&quot;&gt;Eleventy bundle plugin&#39;s GitHub repository&lt;/a&gt;, by adding &lt;code&gt;addBundle(&amp;quot;css&amp;quot;)&lt;/code&gt; and &lt;code&gt;addBundle(&amp;quot;js&amp;quot;)&lt;/code&gt; to my Eleventy configuration file.&lt;/p&gt;
&lt;p&gt;I want to write my bundled JavaScript into files with the &lt;code&gt;getBundleFileUrl&lt;/code&gt; shortcode, so I can add the &lt;code&gt;defer&lt;/code&gt; HTML attribute to the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags that load the bundled file. For this purpose, I use the &lt;code&gt;toFileDirectory&lt;/code&gt; to configure my JavaScript bundle to write the bundled JavaScript files into the output&#39;s assets folder and its JavaScript subfolder, so the setup to bundle my CSS and JavaScript in my Eleventy configuration file becomes this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addBundle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addBundle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;toFileDirectory&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets/js&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I opened the base layout template for my entire website, and added the &lt;code&gt;getBundle&lt;/code&gt; shortcode for CSS and &lt;code&gt;getBundleFileUrl&lt;/code&gt; shortcode for JavaScript in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element, then I replaced the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in my component Nunjucks templates with &lt;code&gt;{% css %}&lt;/code&gt; and &lt;code&gt;{% js %}&lt;/code&gt; shortcodes.&lt;/p&gt;
&lt;p&gt;Now my component-specific CSS and JavaScript are bundled in the output.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;step-3-converting-commonjs-to-esm&quot;&gt;Step 3: Converting CommonJS to ESM&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-19-eleventy-3-0-upgrade/#step-3-converting-commonjs-to-esm&quot; aria-labelledby=&quot;step-3-converting-commonjs-to-esm&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;It was finally time to go all way in using ESM in my projects that use JavaScript, including Eleventy, by converting all CommonJS syntax in my Eleventy configuration and data files to ESM.&lt;/p&gt;
&lt;p&gt;The first step was to add &lt;code&gt;&amp;quot;type&amp;quot;: &amp;quot;module&amp;quot;&lt;/code&gt; to my &lt;code&gt;package.json&lt;/code&gt;, to make my Eleventy project environment support ESM.&lt;/p&gt;
&lt;p&gt;Fun fact: When you create a &lt;code&gt;package.json&lt;/code&gt; file with Bun, &lt;code&gt;&amp;quot;type&amp;quot;: &amp;quot;module&amp;quot;&lt;/code&gt; will be added by default. This actually tripped me up when I created my Eleventy 2.0 website with Bun, and made me learn about the differences between CommonJS and ESM the hard way, so I had to remove &lt;code&gt;&amp;quot;type&amp;quot;: &amp;quot;module&amp;quot;&lt;/code&gt;. Therefore, it feels good to have &lt;code&gt;&amp;quot;type&amp;quot;: &amp;quot;module&amp;quot;&lt;/code&gt; back to my &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Fortunately, Visual Studio Code, my go-to code editor, can automatically convert the CommonJS syntax of the imports in my Eleventy configuration files and the exports of the Eleventy configuration functions to ESM. Visual Studio Code also converts the &lt;code&gt;module.exports&lt;/code&gt; syntax in my website metadata file, by assigning &lt;code&gt;const&lt;/code&gt; variables and adding the &lt;code&gt;export&lt;/code&gt; declaration, which allows me to use the variables and their values in other variables in the same file, without using the &lt;code&gt;this&lt;/code&gt; keyword. For example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; siteDomain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;helenchong.dev&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; siteUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; siteDomain &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; siteAuthor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Helen Chong&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    email&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;contact@helenchong.dev&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; siteUrl &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/about&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; siteDescription &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; siteAuthor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#39;s developer portfolio and blog website.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, I needed to manually change the &lt;code&gt;require()&lt;/code&gt; functions inside the Eleventy configuration function, by using the &lt;code&gt;import&lt;/code&gt; declaration at the top of the file, and assign them variables.&lt;/p&gt;
&lt;p&gt;The process of converting CommonJS to ESM in my Eleventy website was smoother than I expected. It might be because my website is not that complex, and my methods of organising my website files were relatively compatible with ESM.&lt;/p&gt;
&lt;div class=&quot;heading-wrapper h2&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;a class=&quot;heading-anchor&quot; href=&quot;https://helenchong.dev/blog/posts/2024-07-19-eleventy-3-0-upgrade/#conclusion&quot; aria-labelledby=&quot;conclusion&quot;&gt;&lt;span hidden=&quot;&quot;&gt;#&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;My website&#39;s transition to an Eleventy 3.0 site is a success, and I could not be happier with my decision to make the upgrade. If you like Eleventy, I highly recommend giving 3.0 a try.&lt;/p&gt;
&lt;p&gt;Hello, Eleventy 3.0! ðŸ‘‹&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Dipping My Toes in PHP for My Hobby Project</title>
            <link href="https://helenchong.dev/blog/posts/2024-07-08-dipping-my-toes-in-php-for-my-hobby-project/"/>
            <updated>2024-07-08T00:00:00Z</updated>
            <id>https://helenchong.dev/blog/posts/2024-07-08-dipping-my-toes-in-php-for-my-hobby-project/</id>
            <content type="html">&lt;p&gt;Hobbies are a great motivator to learn new things, and web development is no exception. I had dabbled in HTML and CSS since my teenage years, but it was not until December 2022 when I decided to take online web development courses, and then aspire to become a web developer.&lt;/p&gt;
&lt;p&gt;Recently, I took a particular interest in fanlistings. For those who are unfamiliar with it, a fanlisting is an online listing of fans for a particular subject open for fans around the world to join. I find fanlistings a neat concept to gather and discover other people who share your interests. You can find fanlistings through &lt;a href=&quot;https://thefanlistings.org/&quot;&gt;The Fanlistings Network&lt;/a&gt; and &lt;a href=&quot;https://thefanlistings.org/&quot;&gt;The Anime Fanlistings Network&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As an aspiring web developer, I became curious about how a fanlisting is built, and even wondering if I could do it myself. After some searching, I discovered the two most used fanlisting scripts are &lt;a href=&quot;https://scripts.indisguise.org/enthusiast/&quot;&gt;Enthusiast&lt;/a&gt; and &lt;a href=&quot;https://www.jemjabella.co.uk/scripts/bellabuffs/&quot;&gt;BellaBuffs&lt;/a&gt;, both written in PHP. My focus has been on front end web development, so studying how fanlistings are built was my first foray in learning to code in PHP.&lt;/p&gt;
&lt;p&gt;In order to learn to code web pages in PHP, I installed PHP in my computer, and registered an account on &lt;a href=&quot;https://www.infinityfree.com/&quot;&gt;InfinityFree&lt;/a&gt;, one of the few hosting servers that provide PHP and MySQL support for free.&lt;/p&gt;
&lt;p&gt;Initially, I tried out &lt;a href=&quot;https://scripts.indisguise.org/enthusiast/&quot;&gt;Enthusiast&lt;/a&gt;, specifically &lt;a href=&quot;https://github.com/DudeThatsErin/enth&quot;&gt;Erin&#39;s fork of Enthusiast&lt;/a&gt;, since InfinityFree uses version 8.2 of PHP Enthusiast also has extra features that BellaBuffs does not have, including allowing fanlisting members to set passwords and even managing the entire fanlisting collective.&lt;/p&gt;
&lt;p&gt;Unfortunately, I encountered a critical issue with Enthusiast when I tried it: whenever I added a fanlisting to my joined fanlisting list in the admin panel, the home page of the fanlisting collective would go completely blank. I do not know the cause of the issue, and I was not familiar enough with PHP to be confident in attempting to investigate the entire fanlisting collective code just to identify the culprit, especially when it uses MySQL database to store data, adding another complexity in troubleshooting it.&lt;/p&gt;
&lt;p&gt;Therefore, I later tried BellaBuffs, and deiced BellaBuffs to be my personal choice of building and managing a fanlisting.&lt;/p&gt;
&lt;p&gt;There were a few setbacks I encountered when I was learning to build a fanlisting with BellaBuffs on InfinityFree â€” I learned that InfinityFree&#39;s free hosting plan &lt;a href=&quot;https://forum.infinityfree.com/t/sending-email-from-your-website-php-mail/49242&quot;&gt;does not support PHP &lt;code&gt;mail()&lt;/code&gt; function&lt;/a&gt;, which is used by BellaBuffs.&lt;/p&gt;
&lt;p&gt;BellaBuffs includes the optional features to email new members after submitting the join form, email the fanlisting admin when a new member joins or email new members when their applications were approved. The original BellaBuffs script achieved this by using PHP&#39;s built-in &lt;code&gt;mail()&lt;/code&gt; feature, which unfortunately the free hosting of InfinityFree does not support, so I had to figure out an alternative way send emails from a fanlisting powered by BellaBuffs.&lt;/p&gt;
&lt;p&gt;Thankfully, InfinityFree suggested using PHPMailer, and even providing a &lt;a href=&quot;https://github.com/InfinityFreeHosting/contactform&quot;&gt;contact form powered by PHPMailer&lt;/a&gt; as a sample. As a result, I spent time in trying to incorporate PHPMailer into BellaBuffs based on the InfinityFree&#39;s PHPMailer contact form code, and voilÃ , I did it!&lt;/p&gt;
&lt;p&gt;I am glad that despite my inexperience in PHP, I was able to apply the programming knowledge I learned from the coding courses, including CS50&#39;s Introduction to Computer Science, to solve an issue with a PHP script.&lt;/p&gt;
&lt;p&gt;I decided to fork BellaBuffs and release my version of the fanlisting script with PHPMailer integration, in case there are others who want to use BellaBuffs to build fanlistings, but cannot or do not want to use the PHP &lt;code&gt;mail()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;You can download my BellaBuffs fork and learn about how to use it from &lt;a href=&quot;https://github.com/helenclx/BellaBuffs-PHPMailer&quot;&gt;its GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Finally Deployed My Scrimba React Solo Projects to GitHub Pages</title>
            <link href="https://helenchong.dev/blog/posts/2024-06-03-deploy-scrimba-react-solo-projects-to-github-pages/"/>
            <updated>2024-06-03T00:00:00Z</updated>
            <id>https://helenchong.dev/blog/posts/2024-06-03-deploy-scrimba-react-solo-projects-to-github-pages/</id>
            <content type="html">&lt;p&gt;I had completed &lt;a href=&quot;https://scrimba.com/learn/learnreact&quot;&gt;Scrimba&#39;s Learn React course&lt;/a&gt; and its solo projects back in July 2023, even before &lt;a href=&quot;https://helenchong.dev/blog/posts/2023-12-27-JavaScriptmas-2023-Challenge-Completed-and-Won&quot;&gt;winning a one-year Scrimba Pro plan from JavaScriptmas 2023&lt;/a&gt; for free, since the course, including the instructions and Figma files for the solo projects, is also available on freeCodeCamp&#39;s YouTube channel.&lt;/p&gt;
&lt;p&gt;However, I always struggled to figure out how to deploy React project from a GitHub repository&#39;s subfolders or subdirectories, and frustrated by the lack of guides for that. Scrimba&#39;s course does teach about using GitHub, but they often recommend deploying projects from their course to Netlify by doing it manually on &lt;a href=&quot;https://app.netlify.com/drop&quot;&gt;Netlify Drop&lt;/a&gt;. To be fair, Netlify Drop is great for beginner developers, especially when they are new to source control such as Git. However, when I finished Scirmba&#39;s Learn React course, I already had a handful of projects deployed to GitHub Pages. Later, I even managed to deploy my React Tenzies Game, which was based on the tutorial from the Learn React course, to GitHub Pages by creating a &lt;a href=&quot;https://github.com/helenclx/Tenzies-Game&quot;&gt;dedicated repository for my Tenzies Game&lt;/a&gt; and searching for a guide for how to deploy a React project to GitHub Pages.&lt;/p&gt;
&lt;p&gt;Unfortunately, I could not find any guide for how to deploy React projects from multiple subfolders or subdirectories of a repository, and I did not have enough experience with using GitHub actions to feel comfortable trying to figure it out myself, so I had to manually deploy my Scrimba React solo projects to Netlify by using Netlify Drop, which I do not find ideal because I had to repeat the process every time I made a change to those projects.&lt;/p&gt;
&lt;p&gt;Lately, as I have been busy with maintaining and improving my projects hosted on GitHub, I suddenly thought of trying to search for ways to deploy React projects to GitHub Pages from the repository&#39;s subdirectories again. That was when I, at long last, found a guide that helped me to solve my months-long dilemma once and for all: &lt;a href=&quot;https://dev.to/devloker/deploy-a-react-projects-that-are-inside-a-subdirectories-to-github-pages-using-github-actions-cicd-3n9l&quot;&gt;&amp;quot;Deploy a react projects that are inside a subdirectories to GitHub Pages using GitHub Actions (CI/CD)&amp;quot; by DEVLOKER&lt;/a&gt;. It is worth noting that the guide was posted only recently on 11 April 2024. The guide also uses Vite for React projects, which was perfect for me since Vite is also what I use to create React projects, including the ones from Scrimba courses. The guide&#39;s Vite configuration file is in TypeScript format (&lt;code&gt;vite.config.ts&lt;/code&gt;), but it totally works with JavaScript format (&lt;code&gt;vite.config.js&lt;/code&gt;) too.&lt;/p&gt;
&lt;p&gt;This was my set-up in the YAML file of my GitHub action when I succeeded in deploying my Scrimba React solo projects to GitHub Pages:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy to GitHub Pages

&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; read
  &lt;span class=&quot;token key atrule&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; write
  &lt;span class=&quot;token key atrule&quot;&gt;id-token&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; write

&lt;span class=&quot;token key atrule&quot;&gt;concurrency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pages&quot;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;cancel-in-progress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Checkout
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v4
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Set up Node
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v4
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; latest

      &lt;span class=&quot;token comment&quot;&gt;# digital-business-card project&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Build digital&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;business&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;card
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          cd 1-digital-business-card
          npm install &amp;amp;&amp;amp; npm run build
          cd ..
          mkdir -p deploy/1-digital-business-card
          cp -r 1-digital-business-card/dist/* deploy/1-digital-business-card/&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;# travel-journal project&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Build travel&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;journal
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          cd 2-travel-journal
          npm install &amp;amp;&amp;amp; npm run build
          cd ..
          mkdir -p deploy/2-travel-journal
          cp -r 2-travel-journal/dist/* deploy/2-travel-journal/&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;# quizzical project&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Build quizzical
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          cd 3-quizzical
          npm install &amp;amp;&amp;amp; npm run build
          cd ..
          mkdir -p deploy/3-quizzical
          cp -r 3-quizzical/dist/* deploy/3-quizzical/&lt;/span&gt;

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Setup Pages
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/configure&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages@v4
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Upload artifact
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/upload&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;artifact@v3
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./deploy&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy to GitHub Pages
        &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; deployment
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/deploy&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages@v4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This set-up made my Scrimba React solo projects live at the following links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://helenclx.github.io/Scrimba-React-Solo-Projects/1-digital-business-card/&quot;&gt;Digital Business Card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://helenclx.github.io/Scrimba-React-Solo-Projects/2-travel-journal/&quot;&gt;Travel Journal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://helenclx.github.io/Scrimba-React-Solo-Projects/3-quizzical/&quot;&gt;Quizzical&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was beyond relief to finally deployed my Scrimba React solo projects to GitHub Pages, so I decided to do a bit more by creating a HTML home page to list those solo projects when the main link of the deployed repository, &lt;a href=&quot;https://helenclx.github.io/Scrimba-React-Solo-Projects/&quot;&gt;https://helenclx.github.io/Scrimba-React-Solo-Projects/&lt;/a&gt;, is visited.&lt;/p&gt;
&lt;p&gt;I do not need a fancy home page for my deployed Scrimba React solo projects, so I based the home page&#39;s CSS on the &lt;a href=&quot;https://smolcss.dev/#smol-document-styles&quot;&gt;Smol Document Styles by SmolCSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After finished creating the HTML and CSS of the home page, I wrote an extra step in the YAML file of my GitHub actions to deploy my React solo projects to GitHub Pages, after building each project and before setting up GitHub Pages.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# index page and assets&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy index page and assets
  &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
      mkdir -p deploy
      cp -r index.html style.css deploy/
      cp -r 1-digital-business-card/screenshot.png deploy/1-digital-business-card/
      cp -r 2-travel-journal/screenshot.png deploy/2-travel-journal/
      cp -r 3-quizzical/screenshot-start.png 3-quizzical/screenshot-questions.png 3-quizzical/screenshot-answers.png deploy/3-quizzical/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this step does is creating a &amp;quot;deploy&amp;quot; folder and then copy the home page&#39;s HTML, CSS to the &amp;quot;deploy&amp;quot; folder, and copy the project screenshots to the folder of each project.&lt;/p&gt;
&lt;p&gt;Here is the final code of my GitHub action TAML file to deploy my Scrimba React solo projects in &lt;a href=&quot;https://github.com/helenclx/Scrimba-React-Solo-Projects/blob/main/.github/workflows/gh-pages.yml&quot;&gt;my Scrimba React solo projects repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that I have successfully deployed my Scrimba React solo projects to GitHub Pages, I can finally delete those projects from Netlify and free up more monthly bandwidth for my other projects that I actually want to deploy to Netlify.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Custom Domain Name for My Developer Website</title>
            <link href="https://helenchong.dev/blog/posts/2024-05-29-custom-domain-name-helenchong-dev/"/>
            <updated>2024-05-29T00:00:00Z</updated>
            <id>https://helenchong.dev/blog/posts/2024-05-29-custom-domain-name-helenchong-dev/</id>
            <content type="html">&lt;p&gt;This website â€” my developer portfolio and blog website â€” now has a custom domain: &lt;a href=&quot;https://helenchong.dev/&quot;&gt;helenchong.dev&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;As an aspiring developer, I have been putting effort in building, updating and maintaining my portfolio website, and later starting a blog on this site as well to write about coding and tech. The only thing missing for my website is a custom domain name to give the site and myself a unique identity on the web, so I have been considering buying a custom domain name for this website.&lt;/p&gt;
&lt;p&gt;After doing research and comparing various domain name registrars, I settled for Porkbun for their very competitive prices for domain names, and registered an account there. Through searching for available domain names by using my own name, I found out that &lt;code&gt;helenchong.com&lt;/code&gt; has been taken, so I ended up purchasing &lt;code&gt;helenchong.dev&lt;/code&gt; as my domain name, since the &lt;code&gt;.dev&lt;/code&gt; top-level domain (TLD) name is intended for developers, and its renewal price on Porkbun is close to the &lt;code&gt;.com&lt;/code&gt; TLD.&lt;/p&gt;
&lt;p&gt;helenchong.dev is also the very first domain name I ever owned, so configuring DNS to point a domain name to my website was also a new experience. Fortunately, my developer website is hosted on GitHub Pages, thus I could refer to GitHub&#39;s documentation on &lt;a href=&quot;https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site&quot;&gt;configuring a custom domain name for a GitHub Pages site&lt;/a&gt; for how to do it.&lt;/p&gt;
&lt;p&gt;There was a setback, however: Soon after I succeeded in verifying helenchong.dev and pointing to my website on GitHub, I realised that my domain name got reset after pushing new commits to GitHub. While GitHub&#39;s documentation mentioned that manually creating a &lt;code&gt;CNAME&lt;/code&gt; file in the repository may be needed for websites that are built with static site generators, I did not understand the exact actions to perform for my Eleventy website, until I searched the web for how to do it with an Eleventy site and discovered Justus Grunow&#39;s guide &lt;a href=&quot;https://www.justus.ws/tech/deploying-eleventy-to-github-pages/&quot;&gt;&amp;quot;How To Deploy an Eleventy Site to Github Pages with a Custom Domain&amp;quot;&lt;/a&gt;. Manually creating a &lt;code&gt;CNAME&lt;/code&gt; file and configure Eleventy to copy the file into the output folder every time it builds my website saves myself the trouble of having to reconfigure my domain name on GitHub again and again when I make changes to my website.&lt;/p&gt;
&lt;p&gt;Since Porkbun offers free email forwarding, I also take advantage of the feature by creating an email address with my domain name â€” contact@helenchong.dev, and pointing it to my Outlook email address. This means now you can contact me by sending an email to contact@helenchong.dev.&lt;/p&gt;
&lt;p&gt;Another benefit of using a custom domain name for my GitHub user site is that all my other projects that are hosted on GitHub pages also share the same custom domain. For example, the live site of my &lt;a href=&quot;https://github.com/helenclx/Tenzies-Game&quot;&gt;React Tenzies Game&lt;/a&gt; can now be viewed at &lt;a href=&quot;https://helenchong.dev/Tenzies-Game/&quot;&gt;https://helenchong.dev/Tenzies-Game/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Welcome to helenchong.dev! ðŸ¥³&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>CS50x Course Completed</title>
            <link href="https://helenchong.dev/blog/posts/2024-05-27-cs50x-course-completed/"/>
            <updated>2024-05-27T00:00:00Z</updated>
            <id>https://helenchong.dev/blog/posts/2024-05-27-cs50x-course-completed/</id>
            <content type="html">&lt;p&gt;On 23 May 2024, at long last, I completed &lt;a href=&quot;https://cs50.harvard.edu/x/2024/&quot;&gt;CS50â€™s Introduction to Computer Science&lt;/a&gt;, also known as CS50x, course!&lt;/p&gt;
&lt;p&gt;After finishing &lt;a href=&quot;https://helenchong.dev/blog/posts/2024-04-15-cs50x-week-9-completed&quot;&gt;Week 9 of CS50x&lt;/a&gt;, I began to brainstorm ideas for the &lt;a href=&quot;https://cs50.harvard.edu/x/2024/project/&quot;&gt;final project&lt;/a&gt;, in terms of both project type and which language or tech stack to build. Eventually, I chose to build a blogging application with Flask, SQL and Bootstrap, and name the project CS50 Flask Blog.&lt;/p&gt;
&lt;p&gt;You can watch a demonstration of CS50 Flask Blog in this video:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eH8Tq57KzXs&quot;&gt;https://www.youtube.com/watch?v=eH8Tq57KzXs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CS50 Flask Blog includes the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a user account with a password&lt;/li&gt;
&lt;li&gt;Write, edit and delete blog posts&lt;/li&gt;
&lt;li&gt;Rich text editor for writing and editing blog posts&lt;/li&gt;
&lt;li&gt;Change username and password&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The concept of CS50 Flask Blog was a blogging application that can be run and used on a local machine. In addition, CS50 Flask Blog was designed to prioritise user privacy, as it requires users to create an account and log in to write blog posts, thus making it a good fit for private blog posts.&lt;/p&gt;
&lt;p&gt;Another reason I decided to create a blogging application as my final project for CS50x was because I wanted to make use of and apply the Flask skills and knowledge I learned from Week 9 of CS50x. While my (current) speciality is front-end web development, I find Flask in conjunction with SQL useful for projects that need a database, like a blogging platform.&lt;/p&gt;
&lt;p&gt;The idea of requiring users to log in to use the application&#39;s main functions was inspired by the &lt;a href=&quot;https://cs50.harvard.edu/x/2024/psets/9/finance/&quot;&gt;Finance problem set&lt;/a&gt; from Week 9 of CS50x. I based the code of the user account registration, logging in and logging out functions on the Finance problem set, but the rest of CS50 Flask Blog&#39;s code was written from scratch.&lt;/p&gt;
&lt;p&gt;To make further good use of the user account feature and the SQL database of CS50 Flask Blog, I also added the ability for users to change their username and password, and use the SQL database to store users&#39; blog posts.&lt;/p&gt;
&lt;p&gt;During my research into building Flask apps, I learned about &lt;a href=&quot;https://flask.palletsprojects.com/en/2.3.x/blueprints/&quot;&gt;Flask Blueprints&lt;/a&gt;, which are great for making a Flask project modular, scalable and maintainable. I discovered an excellent &lt;a href=&quot;https://realpython.com/flask-project/&quot;&gt;Real Python tutorial for building a scalable Flask web project from scratch&lt;/a&gt;. Using Flask Blueprints was new to me, since this was not taught in CS50x&#39;s Flask lessons.&lt;/p&gt;
&lt;p&gt;When I was working on CS50 Flask Blog, I was also looking for other tutorials about building a blogging project with Flask for reference and inspiration. I ended up referring to Noran Saber Abdelfattah&#39;s guide, &lt;a href=&quot;https://medium.com/@noransaber685/building-a-flask-blog-a-step-by-step-guide-for-beginners-8bffe925cd0e&quot;&gt;&amp;quot;Building a Flask Blog: A Step-by-Step Guide for Beginners&amp;quot;&lt;/a&gt; for how to write the functions to edit and delete posts, but I wrote different code than Abdelfattah&#39;s guide to accommodate CS50 Flask Blog&#39;s user account features.&lt;/p&gt;
&lt;p&gt;After finishing the basic features of creating, editing and deleting posts, I wanted to incorporate a proper text editor into CS50 Flask Blog, so users have actual options to format the text of their blog posts, instead of being stuck with a basic text area input field. After searching the web for adding a text editor into a Flask application, I discovered &lt;a href=&quot;https://flask-ckeditor.readthedocs.io/en/latest/index.html&quot;&gt;Flask-CKEditor&lt;/a&gt;, which allowed integration of the rick text editor CKEditor into a Flask project. Flask-CKEditor was another new thing I learned from building CS50 Flask Blog, so it also trained me to read and understand technical documentations more.&lt;/p&gt;
&lt;p&gt;Per CS50x&#39;s instructions, after the process of writing the code and testing the project was done, I started writing a Read Me for CS50 Flask Blog, by introducing and describing the project and its features, explaining the file structure and the purposes of the files used in the project, listing development dependencies, as well as laying out the steps required to run the project locally.&lt;/p&gt;
&lt;p&gt;For the demo video, which was required to submit the final project, I used Bandicam to record a demo video and Kdenlive to edit the video, which allowed me to practice video editing. I searched for a stock clip and a stock music on Pixabay to add flavour to my demo video.&lt;/p&gt;
&lt;p&gt;After submitting CS50 Flask Blog as my final project, I successfully claimed my CS50x certificate! You can also &lt;a href=&quot;https://cs50.harvard.edu/certificates/8cb0f5a4-4107-4df6-8abc-cfab3a437367&quot;&gt;view the PDF version of my CS50x certificate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://helenchong.dev/assets/images/posts/cs50x-course-completed/CS50x-certificate.avif&quot; alt=&quot;Helen Chong&#39;s CS50x certificate&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Taking the CS50x course had been a great opportunity for me to learn about computer science, how to learn different programming languages and practice problem-solving skills with its problem sets. I am continuing to focus on front-end web development, but I hope I could carry what I learned from CS50x in my developer journey.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Now Page for My Website</title>
            <link href="https://helenchong.dev/blog/posts/2024-04-22-now-page-for-my-website/"/>
            <updated>2024-04-22T00:00:00Z</updated>
            <id>https://helenchong.dev/blog/posts/2024-04-22-now-page-for-my-website/</id>
            <content type="html">&lt;p&gt;On 21 April 2024, I have added a &lt;a href=&quot;https://helenchong.dev/now&quot;&gt;now page&lt;/a&gt; to this website.&lt;/p&gt;
&lt;p&gt;The idea of adding a &amp;quot;now page&amp;quot; was inspired by the website &lt;a href=&quot;https://nownownow.com/&quot;&gt;nownownow.com&lt;/a&gt;, which &lt;a href=&quot;https://nownownow.com/about&quot;&gt;defines&lt;/a&gt; a now page as a page that tells you what this person is focused on at this point in their life. In addition, I also have &lt;a href=&quot;https://nownownow.com/p/D9En&quot;&gt;my own profile on nownownow.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As an aspiring web developer, a now page on my developer portfolio website serves as a means to inform the public about my current priorities and projects.&lt;/p&gt;
&lt;p&gt;My /now page can be updated at any time, so feel free to check the page out when you visit this website!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>CS50x Week 9 Completed</title>
            <link href="https://helenchong.dev/blog/posts/2024-04-15-cs50x-week-9-completed/"/>
            <updated>2024-04-15T00:00:00Z</updated>
            <id>https://helenchong.dev/blog/posts/2024-04-15-cs50x-week-9-completed/</id>
            <content type="html">&lt;p&gt;At last, on 5 March 2024, I completed &lt;a href=&quot;https://cs50.harvard.edu/x/2024/weeks/9/&quot;&gt;Week 9&lt;/a&gt; of the CS50&#39;s Introduction to Computer Science (CS50x) course, by submitting my solutions to &lt;a href=&quot;https://cs50.harvard.edu/x/2024/psets/9/&quot;&gt;Problem Set 9&lt;/a&gt; . In other words, I have finished all assignments for the CS50x course, with the only thing left for me to do to complete the course is building and submitting my own &lt;a href=&quot;https://cs50.harvard.edu/x/2024/project/&quot;&gt;final project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Problem Set 9 consisted of two problems, &lt;a href=&quot;https://cs50.harvard.edu/x/2024/psets/9/birthdays/&quot;&gt;Birthdays&lt;/a&gt; and &lt;a href=&quot;https://cs50.harvard.edu/x/2024/psets/9/finance/&quot;&gt;Finance&lt;/a&gt;, which required Python, Flask and SQL to solve. I did and submitted my solution to the Birthdays problem on 6 January 2024. At the time, I already took a break from the CS50x course for a few months to pursue other front-end web development courses. It was rather challenging to go back to CS50x and do its assignments after taking a break from the course for a while. My SQL and Flask knowledge got rusty due to rarely using them.&lt;/p&gt;
&lt;p&gt;On 2 March 2024, I began tackling the Finance problem. As the final assignment for the course before the final project, Finance was by far the largest assignment of CS50x. As I expected, this project challenged me to apply everything I learned from the CS50x course. I needed to refer to my solutions to the previous problems to refresh my skills of Python, Flask and SQL. Thankfully, I had a good start; on my first day doing the Finance problem, I successfully implemented the Register and Quote features.&lt;/p&gt;
&lt;p&gt;The next day, I started implementing the feature to buy stocks by setting up and testing input elements. After a lot of research and trial and errors, I learned to use &lt;code&gt;try...except&lt;/code&gt; to display an error message on the web page if an incorrect input is entered. I also learned to make use of the phpLiteAdmin installed in the CS50 Codespace to work on the projectâ€™s database and get the SQL commands I want to use, and modify the database in a graphical user interface.&lt;/p&gt;
&lt;p&gt;On the third day of me doing the Finance problem, I successfully implemented the features to buy stocks and displaying the userâ€™s owned stocks on the index page. My work on this project allowed me to refresh my knowledge and skills of SQL, by creating new tables, inserting new rows into tables, and updating data of existing tables. I also got more practice in working with Flask by dynamically render HTML elements via Python.&lt;/p&gt;
&lt;p&gt;On 5 March 2024, I successfully implemented not only the last required features to sell stocks and display transaction history, but also additional features, namely to add cash to the userâ€™s account and change the userâ€™s password. On my last day working on the Finance assignment specifically, I learned about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set the timestamp based on local time zone in SQL&lt;/li&gt;
&lt;li&gt;The flash message function in Flask&lt;/li&gt;
&lt;li&gt;Use both the &lt;code&gt;round()&lt;/code&gt; and &lt;code&gt;float()&lt;/code&gt; functions to round a number to a certain amount of decimals&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;steps&lt;/code&gt; attribute of HTMLâ€™s &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, I completed and submitted the Finance problem from Week 9 of CS50â€™s Introduction to Computer Science!&lt;/p&gt;
&lt;p&gt;Here is a video demonstration of my completed Finance project:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AYkO59_Ojb4&quot;&gt;https://www.youtube.com/watch?v=AYkO59_Ojb4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Working on this assignment allowed me to practice and learn SQL, Python and Flask a lot. By finishing Week 9 of the CS50x, I reached another milestone.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Round 1 of 100 Days of Code Challenge Completed</title>
            <link href="https://helenchong.dev/blog/posts/2024-04-13-round-1-100-days-of-code-challenge-completed/"/>
            <updated>2024-04-13T00:00:00Z</updated>
            <id>https://helenchong.dev/blog/posts/2024-04-13-round-1-100-days-of-code-challenge-completed/</id>
            <content type="html">&lt;p&gt;On 3 January 2024, I started the &lt;a href=&quot;https://www.100daysofcode.com/&quot;&gt;#100DaysOfCode&lt;/a&gt; challenge for the first time. Came 11 April 2024, I finally completed my first round of the challenge!&lt;/p&gt;
&lt;p&gt;I had heard of the 100 Days of Code challenge after I started my journey to learn to code. However, I did not participate in it until reading freeCodeCamp&#39;s article &lt;a href=&quot;https://www.freecodecamp.org/news/100daysofcode-challenge-2024-discord/&quot;&gt;&amp;quot;#100DaysOfCode Challenge for 2024 â€“ Discord Edition&amp;quot;&lt;/a&gt;. This was also how I found out about the &lt;a href=&quot;https://www.freecodecamp.org/news/the-crazy-history-of-the-100daysofcode-challenge-and-why-you-should-try-it-for-2018-6c89a76e298d/&quot;&gt;history of the challenge&lt;/a&gt;, and the fact that the challenge was created by a freeCodeCamp alumni, which I found interesting as an aspiring developer to start to properly learn to code with freeCodeCamp.&lt;/p&gt;
&lt;p&gt;By the time 2024 came around, I had been taking coding courses for more than a year, so I figured the 100 Days of Code challenge would be a good motivator for me to continue my coding journey every day.&lt;/p&gt;
&lt;p&gt;It helped that there were still coding courses for me to take. At the time, freeCodeCamp just recently upgraded their &lt;a href=&quot;https://www.freecodecamp.org/news/learn-javascript-with-new-data-structures-and-algorithms-certification-projects/&quot;&gt;JavaScript&lt;/a&gt; and &lt;a href=&quot;https://www.freecodecamp.org/news/python-curriculum-upgrade/&quot;&gt;Python&lt;/a&gt; curriculum to be project-based. I already earned the &lt;a href=&quot;https://www.freecodecamp.org/certification/helenclx/javascript-algorithms-and-data-structures&quot;&gt;Legacy JavaScript Algorithms and Data Structures Certification&lt;/a&gt;, but since I prefer to learn to code by building projects, I decided to take freeCodeCamp&#39;s upgraded curriculum, and eventually earned the &lt;a href=&quot;https://www.freecodecamp.org/certification/helenclx/javascript-algorithms-and-data-structures-v8&quot;&gt;new freeCodeCamp JavaScript certification&lt;/a&gt; on 16 March 2024 as well.&lt;/p&gt;
&lt;p&gt;Meanwhile, I also started to enrol &lt;a href=&quot;https://scrimba.com/learn/frontend&quot;&gt;Scrimba&#39;s Frontend Developer Career Path&lt;/a&gt; after earning a one-year Scrimba Pro plan from the &lt;a href=&quot;https://helenchong.dev/blog/posts/2023-12-27-JavaScriptmas-2023-Challenge-Completed-and-Won&quot;&gt;JavaScriptmas challenge&lt;/a&gt; in December 2023. By the time I completed my first round of the #100DaysOfCode challenge, I had also completed more than half of the curriculum.&lt;/p&gt;
&lt;p&gt;I committed to the 100 Days of Code challenge by sharing updates every day on Twitter, Mastodon, Bluesky and the &lt;a href=&quot;https://discord.gg/freecodecamp&quot;&gt;official freeCodeCamp Discord server&lt;/a&gt;. In addition, I made the habit of recording my progress in the 100 Days of Code challenge every day, so I can reflect on my coding journey. You can view &lt;a href=&quot;https://github.com/helenclx/100-days-of-code&quot;&gt;my fork of the #100DaysOfCode challenge repository&lt;/a&gt; to read the log of my &lt;a href=&quot;https://github.com/helenclx/100-days-of-code/blob/master/r1-log.md&quot;&gt;Round 1&lt;/a&gt; of the challenge. You can fork the &lt;a href=&quot;https://github.com/kallaway/100-days-of-code&quot;&gt;official repository of the #100DaysOfCode challenge&lt;/a&gt; to log your own progress in the challenge.&lt;/p&gt;
&lt;p&gt;To learn more about the #100DaysOfCode challenge, visit &lt;a href=&quot;https://www.100daysofcode.com/&quot;&gt;its official website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The #100DaysOfCode challenge has been a wonderful journey. I am glad I managed to motivate myself to code every day. Through various courses and projects, I have honed my front-end development skills a lot.&lt;/p&gt;
&lt;p&gt;Thank you to everyone who has supported me throughout my 100 Days of Code journey, and has interacted with my posts on Twitter, Mastodon, Bluesky and the freeCodeCamp Discord serve, by replying to, liking or reposting.&lt;/p&gt;
</content>
        </entry>
</feed>